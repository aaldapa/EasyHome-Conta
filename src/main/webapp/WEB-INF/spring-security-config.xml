<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		   http://www.springframework.org/schema/security
		   http://www.springframework.org/schema/security/spring-security-3.2.xsd">

  	<!--secured-annotations="enabled" habilita la anotacion @Security
  		pre-post-annotations="enabled" habilita las anotaciones @PreAuthorize and @PostAuthorize,		 
		para el codigo Java (Solamente en los metodos de las interfaces)
		Las anotaciones pre-post son mas potentes porque permiten utilizar spEL expression 
		ej: @PreAuthorize("#u.login == principal.username and hasRole('ROLE_USER')")
		-->
	<global-method-security pre-post-annotations="enabled" />  
    

	<!-- Ignora la seguridad para ese patron-->
	<http pattern="/resources/**" security="none"/>
	
	<http use-expressions="true"  access-denied-page="/access-denied.xhtml" auto-config="true">
		<intercept-url pattern="/pages/login.xhtml" access="permitAll()" />
<!-- 		<intercept-url pattern="/pages/login.xhtml" access="isAnonymous()" /> -->
		
		<intercept-url pattern="/pages/user/**" access="hasRole('Administrador')"/>
		<intercept-url pattern="/pages/**" access="authenticated" />
        <form-login login-page="/pages/login.xhtml"  />
        <logout delete-cookies="JSESSIONID" />
<!--         <session-management invalid-session-url="/session-expired.xhtml" /> -->
    </http>
 
	<authentication-manager alias="authenticationManager">
		<!-- Gestión de usuarios mediante un proveedor de servicios de usuarios: -->
    	<authentication-provider user-service-ref="userServiceImpl" >
    		<!-- Desencriptacion de contraseña-->
    		<password-encoder hash="bcrypt" />
       	</authentication-provider>
	</authentication-manager>
	 	
</beans:beans>